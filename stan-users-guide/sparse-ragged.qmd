---
pagetitle: Sparse and Ragged Data Structures
---

# Sparse and Ragged Data Structures  {#sparse-ragged.chapter}

# 稀疏与不规则数据结构 {#sparse-ragged.chapter--cn}

本节译者：郭鑫
本节校审：李君竹

Stan does not directly support either sparse or ragged data
structures, though both can be accommodated with some programming
effort.  The [sparse matrices chapter](https://mc-stan.org/docs/functions-reference/sparse_matrix_operations.html)
introduces a special-purpose sparse matrix times dense vector
multiplication, which should be used where applicable; this chapter
covers more general data structures.

Stan 不直接支持稀疏或不规则数据结构，尽管两者都可以通过一些编程来调节。[稀疏矩阵](#sparse-matrices.chapter) 这一章节介绍了一种专用的稀疏矩阵乘稠密向量乘法，应酌情使用；本章涵盖了更通用的数据结构。

## Sparse data structures

## 稀疏数据结构

Coding sparse data structures is as easy as moving from a matrix-like
data structure to a database-like data structure.  For example,
consider the coding of sparse data for the IRT models discussed in the
[item-response model section](regression.qmd#item-response-models.section).
There are $J$ students and $K$ questions, and if every student answers every
question, then it is practical to declare the data as a $J \times K$
array of answers.

对稀疏数据结构进行编码就像从类似矩阵的数据结构移动到类似数据库的数据结构一样容易。例如，考虑[项目-响应模型](#item-response-models.section) 中讨论的 IRT 模型的稀疏数据编码。有 $J$ 个学生和 $K$ 个问题，如果每个学生都回答了每个问题，那么将数据声明为 $J\times K$ 的答案数组是可行的。 
```stan
data {
  int<lower=1> J;
  int<lower=1> K;
  array[J, K] int<lower=0, upper=1> y;
  // ...
model {
  for (j in 1:J) {
    for (k in 1:K) {
      y[j, k] ~ bernoulli_logit(delta[k] * (alpha[j] - beta[k]));
    }
  }
  // ...
}
```

When not every student is given every question, the dense array coding
will no longer work, because Stan does not support undefined values.


The following missing data example shows an example with $J=3$ and $K=4$,
with missing responses shown as NA, as in R.

\begin{equation*}
y
=
\left[
\begin{array}{cccc}
0 & 1 & \mbox{NA} & 1
\\
0 & \mbox{NA} & \mbox{NA} & 1
\\
\mbox{NA} & 0 & \mbox{NA} & \mbox{NA}
\end{array}
\right]
\end{equation*}

There is no support within Stan for R's NA values, so this data structure cannot be used
directly. Instead, it must be converted to a "long form" as in a database,
with columns indicating the indices along with the value.
With columns $jj$ and $kk$ used for the indexes
(following @GelmanHill:2007), the 2-D array $y$ is recoded as a table.
The number of rows in the table equals the number of defined
array elements, here $y_{1,1} = 0$, $y_{1,2} = 1$, up to $y_{3,2} = 1$.
As the array becomes larger and sparser, the long form becomes
the more economical encoding.

左边是稀疏矩阵 $y$ 的定义，使用 R 的 NA 表示法（Stan 不支持）。右边是相同稀疏矩阵 $y$ 的类似数据库的编码，可以直接在 Stan 中使用。前两列 $jj$ 和 $kk$ 表示索引，最后一列 $y$ 表示值。例如，右侧类似数据库的数据结构的第五行表示 $y_{2,4}=1$。

|*jj* | *kk* |*y* |
|:----|:-----|:---|
|1    | 1    | 0  |
|1    | 2    | 1  |
|1    | 4    | 1  |
|2    | 1    | 0  |
|2    | 4    | 1  |
|3    | 2    | 0  |

当不是每个学生都被问到每个问题时，稠密数组编码将不再有效，因为 Stan 不支持未定义的值。稀疏数据示例显示了一个 $J=3$ 和 $K=4$ 的示例，缺少的响应显示为 NA，如 R 中所示。Stan 中不支持 R 的 NA 值，因此无法直接使用此数据结构。相反，它必须像在数据库中一样转换为“长格式”，列指示 $j$ 和 $k$ 索引以及值。例如，使用 $jj$ 和 $kk$ 作为索引(见 @GelmanHill:2007)，数据结构可以按照示例中右侧示例的方式进行编码。这意味着 $y_{1,1}＝0$，$y_{1,2}＝1$，依此类推，直到 $y_{3,2}＝1$ 为止，所有其他条目都未定义。

Letting $N$ be the number of $y$ that are defined, here $N=6$,
the data and model can be formulated as follows.

假设 $N$ 是定义的 $y$ 的数量，这里 $N=6$，数据和模型可以公式化如下。

```stan
data {
  // ...
  int<lower=1> N;
  array[N] int<lower=1, upper=J> jj;
  array[N] int<lower=1, upper=K> kk;
  array[N] int<lower=0, upper=1> y;
  // ...
}
model {
  for (n in 1:N) {
    y[n] ~ bernoulli_logit(delta[kk[n]]
                           * (alpha[jj[n]] - beta[kk[n]]));
  }
  // ...
}
```

In the situation where there are no missing values, the two model
formulations produce exactly the same log posterior density.

在没有缺失值的情况下，两个模型公式产生完全相同的对数后验密度。

## Ragged data structures {#ragged-data-structs.section}

## 不规则数据结构 {#ragged-data-structs.section--cn}

Ragged arrays are arrays that are not rectangular, but have different
sized entries.  This kind of structure crops up when there are
different numbers of observations per entry.

不规则数组是非矩形的数组，但具有不同大小的条目。当每个条目的观测值数量不同时，这种结构就会出现。

A general approach to dealing with ragged structure is to move to a
full database-like data structure as discussed in the previous
section.  A more compact approach is possible with some indexing into
a linear array.

处理不规则结构的一般方法是迁移到上一节中讨论的完整类似数据库的数据结构。通过将一些结构索引到线性数组中，可以实现更紧凑的方法。

For example, consider a data structure for three groups, each of which
has a different number of observations.

例如，考虑三个组的数据结构，每个组具有不同数量的观测值。

:::: {layout-ncol=2}

::: {#first-column}
$y_1 =  \left[1.3 \ \ 2.4 \ \ 0.9\right]\\$
$y_2 = \left[-1.8 \ \ -0.1\right]\\$
$y_3 = \left[12.9 \ \ 18.7 \ \ 42.9 \ \ 4.7\right]$
:::

::: {#second-column}
$z = [1.3 \ \ 2.4 \ \ 0.9 \ \ -1.8 \ \ -0.1 \ \ 12.9 \ \ 18.7 \ \ 42.9 \ \ 4.7]\\$
$s  =  \{ 3 \ \ 2 \ \ 4 \}$
:::

::::

On the left is the definition of a ragged data structure $y$ with three rows of
different sizes ($y_1$ is size 3, $y_2$ size 2, and $y_3$ size 4).  On the right
is an example of how to code the data in Stan, using a single vector $z$ to hold
all the values and a separate array of integers $s$ to hold the group row sizes.
In this example, $y_1 = z_{1:3}$, $y_2 = z_{4:5}$, and $y_3 = z_{6:9}$.

左边是不规则的数据结构 $y$ 的定义，具有三行不同大小（$y_1$ 大小为3，$y_2$ 大小为 2，$y_3$ 大小为 4）。右侧是如何在 Stan 中对数据进行编码的示例，使用单个向量 $z$ 来保存所有值，并使用单独的整数数组 $s$ 来保存组行大小。在此示例中，$y_1 = z_{1:3}$，$y_2 = z_{4:5}$，$y_3 = z_{6:9}$。

Suppose the model is a  simple varying intercept model, which,
using vectorized notation, would yield a log-likelihood

假设该模型是一个简单的变化截距模型，它使用矢量化表示法，将产生对数似然

\begin{equation*}
\sum_{n=1}^3 \log \textsf{normal}(y_n \mid \mu_n, \sigma).
\end{equation*}
There's no direct way to encode this in Stan.

没有直接的方法可以在 Stan 中对此进行编码。

A full database type structure could be used, as in the sparse
example, but this is inefficient, wasting space for unnecessary
indices and not allowing vector-based density operations.  A better
way to code this data is as a single list of values, with a separate
data structure indicating the sizes of each subarray.  This is
indicated on the right of the example. This coding uses a
single array for the values and a separate array for the sizes of each
row.

可以使用完整的数据库类型结构，如稀疏示例所示，但这效率低下，浪费了不必要的索引空间，并且不允许基于矢量的密度操作。对此数据进行编码的更好方法是作为单个值列表，使用单独的数据结构指示每个子数组的大小。这在示例的右侧指示。此编码对值使用单个数组，对每行的大小使用单独的数组。

The model can then be coded up using slicing operations as follows.

然后可以使用切片操作对模型进行编码，如下所示。

```stan
data {
  int<lower=0> N;   // # observations
  int<lower=0> K;   // # of groups
  vector[N] y;      // observations
  array[K] int s;   // group sizes
  // ...
}
model {
  int pos;
  pos = 1;
  for (k in 1:K) {
    segment(y, pos, s[k]) ~ normal(mu[k], sigma);
    pos = pos + s[k];
  }
```

This coding allows for efficient vectorization, which is worth the
copy cost entailed by the `segment()` vector slicing operation.

这种编码允许有效的矢量化，对于 `segment()` 矢量切片操作所需的复制成本而言是值得的。
